use serde::{Serialize, Deserialize};

/// Function calls generated by the model.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ToolCall {

    /// Tool call ID for responding to the call.
    pub id: String,

    /// The name of the function to call.
    pub name: String,

    /// The arguments to call the function with, as generated by the
    /// model in JSON format.
    ///
    /// Note that the model does not always generate valid JSON, and
    /// may hallucinate parameters not defined by your function
    /// schema. Validate the arguments in your code before calling
    /// your function.
    pub arguments: serde_json::Value,
}

/// A response from an executed tool call.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ToolResponse {

    /// Tool call that this message is responding to.
    pub id: String,

    /// The contents of the tool response.
    pub content: String,
}

/// Defines a function-calling tool.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ToolDefinition {

    /// The name of the function to be called.
    ///
    /// Must be a-z, A-Z, 0-9, or contain underscores and dashes, with
    /// a maximum length of 64.
    pub name: String,

    /// A description of what the function does.
    ///
    /// Used by the model to choose when and how to call the function.
    pub description: String,

    /// The parameters the functions accepts
    ///
    /// Described as a JSON Schema object. Omitting `parameters`
    /// defines a function with an empty parameter list.
    pub parameters: Option<serde_json::Value>,
}
